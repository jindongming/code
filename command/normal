#!/bin/bash
sudo -s
vmstat 2 3 ##每隔2s输出vmstat信息，一共3次，只能查看所有cpu的平均信息
top ##查看cpu消耗，不断更新
sar -g -o test 2 3 ##查看cpu平均信息，指定查看cpu信息
cat /proc/stat ##cpu活动情况
cat /proc/scsi/usb-storage #查看硬盘,u盘序列号
git checkout -b xxx origin/xxx
git rebase -i xxx ##合并commit，之后s
git reset --mixed #不小心add多个.o文件，可以回退回去
##git 储藏,保存当前工作状态，修复完无关bug后，执行反储藏回到当前工作区
git stash save "xxxx" #保存本地修改到储藏队列，重置工作目录和索引里的内容
git commit -a -m "blorpl:typofix" 
git stash apply #回到以前的工作状态
git stash list #查看储藏队列
git stash apply stash@{1} #使用队列中的任意一个储藏
git stash clear #清空队列
##
cat /sys/power/state ##查看系统支持的apci
source /etc/profile
chmod 777 work -R
service xinetd reload
tune2fs -l /dev/sda1 #操作系统安装日期
hdparm -i /dev/sda1  ##查看磁盘序列号 serino
showmount -a ##查看共享目录 /etc/exports 指定nfs共享目录
netstat -in
tcpdump -e #查看运行tcp工具时arp动作
/etc/init.d/xinetd restart #重启tftp服务,tftp端口号69
##n==
##.tar.xz;xz -d **.tar.xz;tar -xf ***.tar
##minicom过行显示，W
#zip -r xxx 压缩文件
#unzip xxx.zip 解压
hexdump /dev/event3
arecord -l ##查看声卡
cat /dev/sndstat ##查看声卡驱动
arecord -d 10 -D 声卡 xx.wav #录音长度为10s 
##linux的音频输入输出是通过/dev/dsp设备的，声音信号的处理是通过/dev/mixer设备来完成的
alsamixer ##音量调节,F5选择耳机前后插入,不同的声卡设置不同的录音输入，前端后者后端
amixer cset
alsactl store ##保存在/var/lib/alsa/asound.state
fbset #查看屏幕相关信息
ls /dev/fb* #查看帧缓冲
##hda
dmesg |grep snd
arecord -l ##查看声卡信息，可能为多个,列出声卡号：设备号
aplay -l
mplayer -ao alsa:device=hw=1,0,0 filea
lspci -v |grep Audio ##查看声卡型号
cat /proc/asound/cards ##查看音频设备
apt-get install alsa-utils alsa-tools alsa-tools-gui alsamixergui -y ##安装相关软件包
arcord -D "plughw:0,0" -f S16_LE -r 16000 -d 5 -t wav file.wav #录制一个5s的声音 -D #选择设备，0，0为系统自带声卡	-f 录音格式	-r 采样率 16000=16KHz	-d 时长	-t	格式
aplay file.wav	#播放录音测试
##
##i2s
cat /dev/dsp >test.wav #将声音录音为pcm数据
cat test.wav >/dev/dsp #将pcm数据播放
##
##can
#linux下验证can总线，两路控制器
ip -details link show can0
ip link set can0 type can bitrate 50000
ip link set can0 up
ip -details link show
ip -details -statistics link show can0
candump #安装库或者运行脚本
##
dd bs=512 count=[end number+1] if=/dev/sdb of=name.img ##可以拷贝uuid，现在linux发行版以uuid标识分区，而不是/dev/sda1
dd bs=512 count=[end +1] if=/dev/sdb |gzip -9 >ghost_linux_latelee.img.gz
gzip -c -d ghost_linux_latelee.img.gz | dd of=/dev/sda
watch -n 5 killall -USR1 DD ##从另一个终端查看dd进度

chkconfig --list |grep on
/etc/inttab
/etc/security
service nfslock stop
/etc/init.d/rc5.d S->K

cvt 
Vim多行缩进技巧
1.按v进入visual状态，选择多行，用>或<缩进或缩出

2. 通常根据语言特征使用自动缩进排版：在命令状态下对当前行用== （连按=两次）, 或对多行用n==（n是自然数）表示自动缩进从当前行起的下面n行。你可以试试把代码缩进任意打乱再用n==排版，相当于一般IDE里的code format。使用gg=G可对整篇代码进行排版。
3.gg   shift+G 首尾
4.全文字眼替换  %s/source/dist/g 或者 :1,$ s/source/dist/g
　　:s/vivian/sky/ 替换当前行第一个 vivian 为 sky

　　:s/vivian/sky/g 替换当前行所有 vivian 为 sky

　　:n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky

　　:n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky

　　n 为数字，若 n 为 .，表示从当前行开始到最后一行

　　:%s/vivian/sky/(等同于 :g/vivian/s//sky/) 替换每一行的第一个 vivian 为 sky

　　:%s/vivian/sky/g(等同于 :g/vivian/s//sky/g) 替换每一行中所有 vivian 为 sky

　　可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符

　　:s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/

　　:%s+/oradata/apras/+/user01/apras1+ (使用+ 来 替换 / )： /oradata/apras/替换成/user01/apras1/

　　* ************************************

　　1.:s/vivian/sky/ 替换当前行第一个 vivian 为 sky

　　:s/vivian/sky/g 替换当前行所有 vivian 为 sky

　　2. :n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky

　　:n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky

　　(n 为数字，若 n 为 .，表示从当前行开始到最后一行)

　　3. :%s/vivian/sky/(等同于 :g/vivian/s//sky/) 替换每一行的第一个 vivian 为 sky

　　:%s/vivian/sky/g(等同于 :g/vivian/s//sky/g) 替换每一行中所有 vivian 为 sky

　　4. 可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符

　　:s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/

　　5. 删除文本中的^M

　　问题描述：对于换行,window下用回车换行(0A0D)来表示，Linux下是回车(0A)来表示。这样，将window上的文件拷到unix上用时，总会有个^M.请写个用在unix下的过滤windows文件的换行符(0D)的shell或c程序。

　　· 使用命令：cat filename1 | tr -d “^V^M” > newfile;

　　· 使用命令：sed -e “s/^V^M//” filename > outputfilename。需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M。你必须要手工进行输入，而不是粘贴。

　　· 在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：%s/^V^M//。

　　· :%s/^M$//g

　　如果上述方法无用，则正确的解决办法是：

　　· tr -d "\r" < src >dest

　　· tr -d "\015" dest

　　· strings A>B

　　6. 其它

　　利用 :s 命令可以实现字符串的替换。具体的用法包括：

　　:s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1

　　:s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1

　　:.,$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1

　　:1,$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1

　　:g/str1/s//str2/g 功能同上

　　从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换;不加 g，表示只对搜索

　　字符串的首次出现进行替换;g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作。

journalctl -f -u network.service ##查看系统服务记录
